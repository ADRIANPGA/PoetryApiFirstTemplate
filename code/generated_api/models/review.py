# coding: utf-8

"""
    Reviewly

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Review(BaseModel):
    """
    Review
    """ # noqa: E501
    review_id: Optional[StrictInt] = None
    amazon_user_id: Optional[StrictStr] = None
    product_id: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    rating: Optional[Union[Annotated[float, Field(le=5.0, strict=True, ge=1.0)], Annotated[int, Field(le=5, strict=True, ge=1)]]] = None
    images: Optional[List[StrictStr]] = None
    sentiment: Optional[StrictStr] = None
    helpful_vote: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    verified_purchase: Optional[StrictBool] = None
    timestamp: Optional[datetime] = None
    created_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["review_id", "amazon_user_id", "product_id", "title", "text", "rating", "images", "sentiment", "helpful_vote", "verified_purchase", "timestamp", "created_at"]

    @field_validator('sentiment')
    def sentiment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('positive', 'negative', 'neutral',):
            raise ValueError("must be one of enum values ('positive', 'negative', 'neutral')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Review from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Review from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "review_id": obj.get("review_id"),
            "amazon_user_id": obj.get("amazon_user_id"),
            "product_id": obj.get("product_id"),
            "title": obj.get("title"),
            "text": obj.get("text"),
            "rating": obj.get("rating"),
            "images": obj.get("images"),
            "sentiment": obj.get("sentiment"),
            "helpful_vote": obj.get("helpful_vote"),
            "verified_purchase": obj.get("verified_purchase"),
            "timestamp": obj.get("timestamp"),
            "created_at": obj.get("created_at")
        })
        return _obj


