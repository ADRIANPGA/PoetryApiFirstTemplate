# coding: utf-8

"""
    Reviewly

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from generated_api.models.product_videos_inner import ProductVideosInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Product(BaseModel):
    """
    Product
    """ # noqa: E501
    product_id: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    main_category: Optional[StrictStr] = None
    average_rating: Optional[Union[Annotated[float, Field(le=5, strict=True, ge=0)], Annotated[int, Field(le=5, strict=True, ge=0)]]] = None
    rating_number: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    features: Optional[List[StrictStr]] = None
    description: Optional[List[StrictStr]] = None
    price: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    resume_review: Optional[StrictStr] = None
    images: Optional[List[StrictStr]] = None
    videos: Optional[List[ProductVideosInner]] = None
    store: Optional[StrictStr] = None
    categories: Optional[List[StrictStr]] = None
    details: Optional[Dict[str, StrictStr]] = None
    asin: Optional[StrictStr] = None
    parent_asin: Optional[StrictStr] = None
    bought_together: Optional[List[StrictStr]] = None
    amazon_link: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["product_id", "title", "main_category", "average_rating", "rating_number", "features", "description", "price", "resume_review", "images", "videos", "store", "categories", "details", "asin", "parent_asin", "bought_together", "amazon_link", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item in self.videos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['videos'] = _items
        # set to None if parent_asin (nullable) is None
        # and model_fields_set contains the field
        if self.parent_asin is None and "parent_asin" in self.model_fields_set:
            _dict['parent_asin'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product_id": obj.get("product_id"),
            "title": obj.get("title"),
            "main_category": obj.get("main_category"),
            "average_rating": obj.get("average_rating"),
            "rating_number": obj.get("rating_number"),
            "features": obj.get("features"),
            "description": obj.get("description"),
            "price": obj.get("price"),
            "resume_review": obj.get("resume_review"),
            "images": obj.get("images"),
            "videos": [ProductVideosInner.from_dict(_item) for _item in obj.get("videos")] if obj.get("videos") is not None else None,
            "store": obj.get("store"),
            "categories": obj.get("categories"),
            "details": obj.get("details"),
            "asin": obj.get("asin"),
            "parent_asin": obj.get("parent_asin"),
            "bought_together": obj.get("bought_together"),
            "amazon_link": obj.get("amazon_link"),
            "created_at": obj.get("created_at")
        })
        return _obj


